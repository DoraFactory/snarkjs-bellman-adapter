const circomlib = require('circom')

class Tree {
  constructor(degree, leaves, depth) {
    const DEGREE = degree
    const DEGREE_DEC = degree - 1

    const nodesCount = (DEGREE ** (depth + 1) - 1) / DEGREE_DEC
    const nodes = new Array(nodesCount).fill(0n)

    const idx0 = (DEGREE ** depth - 1) / DEGREE_DEC
    for (let i = 0; i < leaves.length; i++) {
      if (i >= DEGREE ** depth) {
        console.error('OVERFLOW')
        break
      }
      nodes[idx0 + i] = BigInt(leaves[i])
    }

    let zeroValue = 0n
    for (let level = depth; level > 0; level--) {
      const leavesCount = DEGREE ** level

      const zeroLeaves = new Array(DEGREE).fill(zeroValue)
      const zeroLeavesStr = zeroLeaves.toString()
      const zeroHash = circomlib.poseidon(zeroLeaves)
      
      const idx0 = (DEGREE ** (level - 1) - 1) / DEGREE_DEC
      for (let i = 0; i < leavesCount / DEGREE; i++) {
        const start = (idx0 + i) * DEGREE + 1
        const children = nodes.slice(start, start + DEGREE)
        if (children.toString() === zeroLeavesStr) {
          nodes[idx0 + i] = zeroHash
        } else {
          nodes[idx0 + i] = circomlib.poseidon(children)
        }
      }
    }

    this.nodes = nodes
  }
}

// 19261153649140605024552417994922546473530072875902678653210025980873274131905n
const zeroResult = [
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0,
  0, 0, 0, 0, 0
]
// 13061078352014817668609907075282734603345597320054674978529795270506452458387n
const currentResult = [
  1, 0, 0, 0, 0,
  0, 1, 0, 0, 0,
  0, 0, 1, 0, 0,
  0, 0, 0, 1, 0,
  0, 0, 0, 0, 1
]
// 13825341708420337358079224873665527353187323523364793731127625760393170512688n
const currentResultsCommitment = [
  13061078352014817668609907075282734603345597320054674978529795270506452458387n,
  1010101010101n,
]
// 3496811527345972039133039583842713405352707391156205639181539705899151971298n
const currentSpentVoiceCreditsCommitment = [
  13061078352014817668609907075282734603345597320054674978529795270506452458387n,
  666777888n,
]

// 13585673256815843002910695559975797670777026225929933484718670068396621786461n
const state0 = [
  0,
  0,
  "19261153649140605024552417994922546473530072875902678653210025980873274131905",
  0,
  0
]
// 640710908845573873486638641639854305075241725857379761008307915501402256722n
const state1 = [
  12345,
  56789,
  "7169632865218445363203982655544614034513630606366611555435774897171201290918",
  0,
  4
]
// 5104092352368436149987654533201241157298685808434079721685841471215333660568n
const state2 = [
  54321,
  98765,
  "4870762834136539652553381140561687577069305066003354194076523936251466264465",
  0,
  5
]

// 3381148748204916783890444489178683193937891773528418770490218700122047345850n
const intermediateStateLeaves = [
  640710908845573873486638641639854305075241725857379761008307915501402256722n,
  5104092352368436149987654533201241157298685808434079721685841471215333660568n,
  13585673256815843002910695559975797670777026225929933484718670068396621786461n,13585673256815843002910695559975797670777026225929933484718670068396621786461n
]
// 2919908331752817617409647365947905441273358849630326857259776242620900956330n
const state = [
  3381148748204916783890444489178683193937891773528418770490218700122047345850n,
  11111,
  22222,
  33333
]

const finalResult = [
  2, 4, 1, 6, 0,
  0, 1, 0, 0, 0,
  0, 0, 1, 0, 0,
  0, 0, 0, 1, 0,
  0, 0, 0, 0, 1
]
const finalResultsCommitment = [
  17028507997277536708508767636863505934750200823961752324870627421713433495011n,
  555,
]

const finalPerVOSpentVoice = [
  2, 16, 1, 36, 0,
  0, 1, 0, 0, 0,
  0, 0, 1, 0, 0,
  0, 0, 0, 1, 0,
  0, 0, 0, 0, 1
]
const finalPerVOSpentVoicesCommitment = [
  11402202510941687088695290541365394285229857366852087680931238395171135067270n,
  123456789,
]

// 19261153649140605024552417994922546473530072875902678653210025980873274131905n
const input = new Array(5).fill(20128108645269628196437541268645219115783065883982231000110543999154274320533n)
// 14484759237417689684102558734796434099586647593646577718396063346556730968249n
const input2 = [
  3300241519452287493700434490456275264500058555179150981077965921814484332176n,
  20017764101928005973906869479218555869286328459998999367935018992260318153770n,
  20017764101928005973906869479218555869286328459998999367935018992260318153770n,
  20017764101928005973906869479218555869286328459998999367935018992260318153770n,
  20017764101928005973906869479218555869286328459998999367935018992260318153770n,
]

// const tree = new Tree(5, finalPerVOSpentVoice, 2)
const tree = new Tree(5, input2, 1)

console.log(tree.nodes[0])
